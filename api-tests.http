### 1. Health Check
GET http://localhost:3000/health

###

### 2. Create Order and Store ID
POST http://localhost:3000/api/orders
Content-Type: application/json

{
  "items": [
    {
      "name": "Latte",
      "price": 5.00,
      "quantity": 1,
      "size": "small"
    },
    {
      "name": "Croissant",
      "price": 3.50,
      "quantity": 2,
      "size": "medium"
    }
  ]
}

> {%
    client.test("Order creation", function() {
        client.assert(response.status === 201, "Should create order");
        client.assert(response.body.orderId, "Should return order ID");
    });
    
    // Store for subsequent requests
    client.global.set("order_id", response.body.orderId);
    client.global.set("created_timestamp", response.body.timestamp);
    
    console.log("âœ… Created order:", response.body.orderId);
%}

###

### 3. Get All Orders
GET http://localhost:3000/api/orders

###

### 4. Get Specific Order (using captured ID)
GET http://localhost:3000/api/orders/{{order_id}}

> {%
    client.test("Get specific order", function() {
        client.assert(response.status === 200, "Should get order");
        client.assert(response.body.order.id === client.global.get("order_id"), "IDs should match");
    });
%}

###

### 5. Update Order Status
PUT http://localhost:3000/api/orders/{{order_id}}/status
Content-Type: application/json

{
  "status": "completed"
}

> {%
    client.test("Update order status", function() {
        client.assert(response.status === 200, "Should update status");
        client.assert(response.body.success === true, "Should be successful");
    });
%}

###

### 6. Verify Status Update
GET http://localhost:3000/api/orders/{{order_id}}

> {%
    client.test("Verify status update", function() {
        client.assert(response.status === 200, "Should get order");
        client.assert(response.body.order.status === "completed", "Status should be completed");
    });
%}

###

### 7. Get Statistics
GET http://localhost:3000/api/orders/stats